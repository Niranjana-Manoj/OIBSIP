# -*- coding: utf-8 -*-
"""Iris flowerclassification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tTQ06YCdGLT8wx2rfRGCPeZ37SdG0DHQ

**IMPORTING LIBRARIES**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

# Commented out IPython magic to ensure Python compatibility.
plt.style.use("fivethirtyeight")
# %matplotlib inline

df=pd.read_csv('/content/Iris.csv')
df.head()

df.info()

df.describe()

df.shape

"""DROP COLUMN ID"""

df.drop('Id',axis=1,inplace=True)
df.head()

df['Species'].value_counts()

df.isnull().sum()

import missingno as msno
msno.bar(df)

df.drop_duplicates(inplace=True)

"""**EDA**

1. Relationship between species and sepal length
"""

plt.figure(figsize=(15,8))
sns.boxplot(x='Species',y='SepalLengthCm',data=df.sort_values('SepalLengthCm',ascending=False))

"""2. Relationship between species and sepal width"""

df.plot(kind='scatter',x='SepalWidthCm',y='SepalLengthCm')

"""3.Pairplot"""

sns.pairplot(df, hue="Species", size=3)

"""4. Boxplot"""

df.boxplot(by="Species", figsize=(12, 6))

"""5. Andrews_curves"""

import pandas.plotting
from pandas.plotting import andrews_curves
andrews_curves(df, "Species")

"""**TRAINING AND TESTING**"""

X=df.drop('Species',axis=1)
y=df['Species']

from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical

df['Species'] = pd.Categorical(df.Species)
df['Species'] = df.Species.cat.codes

y = to_categorical(df.Species)

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.30,stratify=y,random_state=123)

model=Sequential()
model.add(Dense(100,activation='relu',input_shape=(4,)))

model.add(Dense(3,activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

history=model.fit(X_train,y_train,epochs=45,validation_data=(X_test, y_test))

model.evaluate(X_test,y_test)

pred = model.predict(X_test[:10])
print(pred)

p=np.argmax(pred,axis=1)
print(p)
print(y_test[:10])

history.history['accuracy']

history.history['val_accuracy']

plt.figure()


plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'])
plt.show()