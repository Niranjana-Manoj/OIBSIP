# -*- coding: utf-8 -*-
"""Car Price Prediction with Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J3g-DrM3YAF77OD3YBBgeugYcZAziAWT

**IMPORT LIBRARIES**
"""

import numpy as np
import pandas as pd

df = pd.read_csv("/content/car data.csv")
df.head()

"""**DATA PREPROCESSING**"""

df.info()

df.describe()

df.isnull().sum()

"""**EDA**"""

import matplotlib.pyplot as plt
import seaborn as sns
df['Fuel_Type'].value_counts()

sns.countplot(x='Fuel_Type', data=df)
plt.show()

df['Transmission'].value_counts()

sns.countplot(x='Transmission', data=df)
plt.show()

df['Selling_type'].value_counts()

sns.countplot(x='Selling_type', data=df)
plt.show()

df.hist(bins=20, figsize=(15, 10))
plt.show()

plt.figure(figsize=(16, 8))
plt.subplot(1, 2, 1)
sns.boxplot(x='Fuel_Type', y='Selling_Price', data=df)
plt.title('Relationship between Fuel type and Selling Price')
plt.subplot(1, 2, 2)
sns.boxplot(x='Transmission', y='Selling_Price', data=df)
plt.title('Relationship between Transmission and Selling price')
plt.tight_layout()
plt.show()

plt.figure(figsize=(16,12))
sns.boxplot(x='Car_Name', y='Selling_Price', data=df)
plt.xticks(rotation=90)
plt.show()

"""**MODEL BUILDING**"""

X = df.drop('Selling_Price', axis=1)
y = df['Selling_Price']

X_encoded = pd.get_dummies(X, columns=['Fuel_Type', 'Selling_type', 'Transmission','Car_Name'], prefix=['Fuel', 'Selling', 'Transmission','Cars'])

"""Splitting the dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

"""Train Regression Model"""

from sklearn.linear_model import LinearRegression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

y_pred_linear = linear_model.predict(X_test)

"""Evaluate"""

from sklearn.metrics import mean_squared_error
from math import sqrt
mse_linear = mean_squared_error(y_test, y_pred_linear)
rmse_linear = sqrt(mse_linear)
print(f'Linear Regression RMSE: {rmse_linear}')

"""Train Random Forest Model"""

from sklearn.ensemble import RandomForestRegressor
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

"""Evaluate"""

mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = sqrt(mse_rf)
print(f'Random Forest RMSE: {rmse_rf}')

"""**ACTUAL VS PREDICTED SELLING PRICE**"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred_rf)
plt.xlabel('Actual Selling Price')
plt.ylabel('Predicted Selling Price (Random Forest)')
plt.title('Actual vs. Predicted Selling Price (Random Forest)')
plt.show()